// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto/pipeline.proto

#include "pipeline/proto/pipeline.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace tpipeline {
namespace proto {
PROTOBUF_CONSTEXPR Tensor::Tensor(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.shape_)*/{}
  , /*decltype(_impl_._shape_cached_byte_size_)*/{0}
  , /*decltype(_impl_.data_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.dtype_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TensorDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TensorDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TensorDefaultTypeInternal() {}
  union {
    Tensor _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TensorDefaultTypeInternal _Tensor_default_instance_;
PROTOBUF_CONSTEXPR Task::Task(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.data_)*/nullptr
  , /*decltype(_impl_.type_)*/0
  , /*decltype(_impl_.micro_batch_id_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TaskDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TaskDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TaskDefaultTypeInternal() {}
  union {
    Task _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TaskDefaultTypeInternal _Task_default_instance_;
PROTOBUF_CONSTEXPR Message::Message(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.sender_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.recipient_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.command_type_)*/0
  , /*decltype(_impl_.sequence_number_)*/0u
  , /*decltype(_impl_.timestamp_)*/uint64_t{0u}
  , /*decltype(_impl_.payload_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct MessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MessageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MessageDefaultTypeInternal() {}
  union {
    Message _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MessageDefaultTypeInternal _Message_default_instance_;
PROTOBUF_CONSTEXPR StageConfig::StageConfig(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.stage_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.model_config_json_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.next_stage_endpoint_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.prev_stage_endpoint_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.coordinator_endpoint_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.stage_index_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct StageConfigDefaultTypeInternal {
  PROTOBUF_CONSTEXPR StageConfigDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~StageConfigDefaultTypeInternal() {}
  union {
    StageConfig _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 StageConfigDefaultTypeInternal _StageConfig_default_instance_;
}  // namespace proto
}  // namespace tpipeline
static ::_pb::Metadata file_level_metadata_proto_2fpipeline_2eproto[4];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_proto_2fpipeline_2eproto[2];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_proto_2fpipeline_2eproto = nullptr;

const uint32_t TableStruct_proto_2fpipeline_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tpipeline::proto::Tensor, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tpipeline::proto::Tensor, _impl_.shape_),
  PROTOBUF_FIELD_OFFSET(::tpipeline::proto::Tensor, _impl_.data_),
  PROTOBUF_FIELD_OFFSET(::tpipeline::proto::Tensor, _impl_.dtype_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tpipeline::proto::Task, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tpipeline::proto::Task, _impl_.type_),
  PROTOBUF_FIELD_OFFSET(::tpipeline::proto::Task, _impl_.data_),
  PROTOBUF_FIELD_OFFSET(::tpipeline::proto::Task, _impl_.micro_batch_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tpipeline::proto::Message, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::tpipeline::proto::Message, _impl_._oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tpipeline::proto::Message, _impl_.command_type_),
  PROTOBUF_FIELD_OFFSET(::tpipeline::proto::Message, _impl_.sequence_number_),
  PROTOBUF_FIELD_OFFSET(::tpipeline::proto::Message, _impl_.sender_id_),
  PROTOBUF_FIELD_OFFSET(::tpipeline::proto::Message, _impl_.recipient_id_),
  PROTOBUF_FIELD_OFFSET(::tpipeline::proto::Message, _impl_.timestamp_),
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::tpipeline::proto::Message, _impl_.payload_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tpipeline::proto::StageConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tpipeline::proto::StageConfig, _impl_.stage_id_),
  PROTOBUF_FIELD_OFFSET(::tpipeline::proto::StageConfig, _impl_.stage_index_),
  PROTOBUF_FIELD_OFFSET(::tpipeline::proto::StageConfig, _impl_.model_config_json_),
  PROTOBUF_FIELD_OFFSET(::tpipeline::proto::StageConfig, _impl_.next_stage_endpoint_),
  PROTOBUF_FIELD_OFFSET(::tpipeline::proto::StageConfig, _impl_.prev_stage_endpoint_),
  PROTOBUF_FIELD_OFFSET(::tpipeline::proto::StageConfig, _impl_.coordinator_endpoint_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::tpipeline::proto::Tensor)},
  { 9, -1, -1, sizeof(::tpipeline::proto::Task)},
  { 18, -1, -1, sizeof(::tpipeline::proto::Message)},
  { 33, -1, -1, sizeof(::tpipeline::proto::StageConfig)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::tpipeline::proto::_Tensor_default_instance_._instance,
  &::tpipeline::proto::_Task_default_instance_._instance,
  &::tpipeline::proto::_Message_default_instance_._instance,
  &::tpipeline::proto::_StageConfig_default_instance_._instance,
};

const char descriptor_table_protodef_proto_2fpipeline_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\024proto/pipeline.proto\022\017tpipeline.proto\""
  "4\n\006Tensor\022\r\n\005shape\030\001 \003(\r\022\014\n\004data\030\002 \001(\014\022\r"
  "\n\005dtype\030\003 \001(\t\"n\n\004Task\022\'\n\004type\030\001 \001(\0162\031.tp"
  "ipeline.proto.TaskType\022%\n\004data\030\002 \001(\0132\027.t"
  "pipeline.proto.Tensor\022\026\n\016micro_batch_id\030"
  "\003 \001(\r\"\346\001\n\007Message\0222\n\014command_type\030\001 \001(\0162"
  "\034.tpipeline.proto.CommandType\022\027\n\017sequenc"
  "e_number\030\002 \001(\r\022\021\n\tsender_id\030\003 \001(\t\022\024\n\014rec"
  "ipient_id\030\004 \001(\t\022\021\n\ttimestamp\030\005 \001(\004\022%\n\004ta"
  "sk\030\n \001(\0132\025.tpipeline.proto.TaskH\000\022\016\n\004tex"
  "t\030\013 \001(\tH\000\022\020\n\006signal\030\014 \001(\010H\000B\t\n\007payload\"\247"
  "\001\n\013StageConfig\022\020\n\010stage_id\030\001 \001(\t\022\023\n\013stag"
  "e_index\030\002 \001(\005\022\031\n\021model_config_json\030\003 \001(\t"
  "\022\033\n\023next_stage_endpoint\030\004 \001(\t\022\033\n\023prev_st"
  "age_endpoint\030\005 \001(\t\022\034\n\024coordinator_endpoi"
  "nt\030\006 \001(\t*%\n\010TaskType\022\013\n\007FORWARD\020\000\022\014\n\010BAC"
  "KWARD\020\001*\204\003\n\013CommandType\022\020\n\014FORWARD_TASK\020"
  "\000\022\021\n\rBACKWARD_TASK\020\001\022\025\n\021UPDATE_PARAMETER"
  "S\020\002\022\016\n\nTRAIN_MODE\020\003\022\r\n\tEVAL_MODE\020\004\022\014\n\010SH"
  "UTDOWN\020\005\022\025\n\021HANDSHAKE_REQUEST\020\006\022\026\n\022HANDS"
  "HAKE_RESPONSE\020\007\022\023\n\017CONFIG_TRANSFER\020\010\022\023\n\017"
  "CONFIG_RECEIVED\020\t\022\024\n\020WEIGHTS_TRANSFER\020\n\022"
  "\024\n\020WEIGHTS_RECEIVED\020\013\022\022\n\016STATUS_REQUEST\020"
  "\014\022\023\n\017STATUS_RESPONSE\020\r\022\026\n\022PARAMETERS_UPD"
  "ATED\020\016\022\020\n\014HEALTH_CHECK\020\017\022\020\n\014ERROR_REPORT"
  "\020\020\022\020\n\014TASK_FAILURE\020\021\022\020\n\014BARRIER_SYNC\020\022b\006"
  "proto3"
  ;
static ::_pbi::once_flag descriptor_table_proto_2fpipeline_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_proto_2fpipeline_2eproto = {
    false, false, 1046, descriptor_table_protodef_proto_2fpipeline_2eproto,
    "proto/pipeline.proto",
    &descriptor_table_proto_2fpipeline_2eproto_once, nullptr, 0, 4,
    schemas, file_default_instances, TableStruct_proto_2fpipeline_2eproto::offsets,
    file_level_metadata_proto_2fpipeline_2eproto, file_level_enum_descriptors_proto_2fpipeline_2eproto,
    file_level_service_descriptors_proto_2fpipeline_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_proto_2fpipeline_2eproto_getter() {
  return &descriptor_table_proto_2fpipeline_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_proto_2fpipeline_2eproto(&descriptor_table_proto_2fpipeline_2eproto);
namespace tpipeline {
namespace proto {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TaskType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_proto_2fpipeline_2eproto);
  return file_level_enum_descriptors_proto_2fpipeline_2eproto[0];
}
bool TaskType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CommandType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_proto_2fpipeline_2eproto);
  return file_level_enum_descriptors_proto_2fpipeline_2eproto[1];
}
bool CommandType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class Tensor::_Internal {
 public:
};

Tensor::Tensor(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tpipeline.proto.Tensor)
}
Tensor::Tensor(const Tensor& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Tensor* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.shape_){from._impl_.shape_}
    , /*decltype(_impl_._shape_cached_byte_size_)*/{0}
    , decltype(_impl_.data_){}
    , decltype(_impl_.dtype_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_data().empty()) {
    _this->_impl_.data_.Set(from._internal_data(), 
      _this->GetArenaForAllocation());
  }
  _impl_.dtype_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.dtype_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_dtype().empty()) {
    _this->_impl_.dtype_.Set(from._internal_dtype(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:tpipeline.proto.Tensor)
}

inline void Tensor::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.shape_){arena}
    , /*decltype(_impl_._shape_cached_byte_size_)*/{0}
    , decltype(_impl_.data_){}
    , decltype(_impl_.dtype_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.dtype_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.dtype_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Tensor::~Tensor() {
  // @@protoc_insertion_point(destructor:tpipeline.proto.Tensor)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Tensor::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.shape_.~RepeatedField();
  _impl_.data_.Destroy();
  _impl_.dtype_.Destroy();
}

void Tensor::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Tensor::Clear() {
// @@protoc_insertion_point(message_clear_start:tpipeline.proto.Tensor)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.shape_.Clear();
  _impl_.data_.ClearToEmpty();
  _impl_.dtype_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Tensor::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated uint32 shape = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_shape(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 8) {
          _internal_add_shape(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes data = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_data();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string dtype = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_dtype();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tpipeline.proto.Tensor.dtype"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Tensor::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tpipeline.proto.Tensor)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 shape = 1;
  {
    int byte_size = _impl_._shape_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          1, _internal_shape(), byte_size, target);
    }
  }

  // bytes data = 2;
  if (!this->_internal_data().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_data(), target);
  }

  // string dtype = 3;
  if (!this->_internal_dtype().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_dtype().data(), static_cast<int>(this->_internal_dtype().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tpipeline.proto.Tensor.dtype");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_dtype(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tpipeline.proto.Tensor)
  return target;
}

size_t Tensor::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tpipeline.proto.Tensor)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 shape = 1;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt32Size(this->_impl_.shape_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._shape_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // bytes data = 2;
  if (!this->_internal_data().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_data());
  }

  // string dtype = 3;
  if (!this->_internal_dtype().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_dtype());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Tensor::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Tensor::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Tensor::GetClassData() const { return &_class_data_; }


void Tensor::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Tensor*>(&to_msg);
  auto& from = static_cast<const Tensor&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tpipeline.proto.Tensor)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.shape_.MergeFrom(from._impl_.shape_);
  if (!from._internal_data().empty()) {
    _this->_internal_set_data(from._internal_data());
  }
  if (!from._internal_dtype().empty()) {
    _this->_internal_set_dtype(from._internal_dtype());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Tensor::CopyFrom(const Tensor& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tpipeline.proto.Tensor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Tensor::IsInitialized() const {
  return true;
}

void Tensor::InternalSwap(Tensor* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.shape_.InternalSwap(&other->_impl_.shape_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.data_, lhs_arena,
      &other->_impl_.data_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.dtype_, lhs_arena,
      &other->_impl_.dtype_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata Tensor::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fpipeline_2eproto_getter, &descriptor_table_proto_2fpipeline_2eproto_once,
      file_level_metadata_proto_2fpipeline_2eproto[0]);
}

// ===================================================================

class Task::_Internal {
 public:
  static const ::tpipeline::proto::Tensor& data(const Task* msg);
};

const ::tpipeline::proto::Tensor&
Task::_Internal::data(const Task* msg) {
  return *msg->_impl_.data_;
}
Task::Task(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tpipeline.proto.Task)
}
Task::Task(const Task& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Task* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.data_){nullptr}
    , decltype(_impl_.type_){}
    , decltype(_impl_.micro_batch_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_data()) {
    _this->_impl_.data_ = new ::tpipeline::proto::Tensor(*from._impl_.data_);
  }
  ::memcpy(&_impl_.type_, &from._impl_.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.micro_batch_id_) -
    reinterpret_cast<char*>(&_impl_.type_)) + sizeof(_impl_.micro_batch_id_));
  // @@protoc_insertion_point(copy_constructor:tpipeline.proto.Task)
}

inline void Task::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.data_){nullptr}
    , decltype(_impl_.type_){0}
    , decltype(_impl_.micro_batch_id_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Task::~Task() {
  // @@protoc_insertion_point(destructor:tpipeline.proto.Task)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Task::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.data_;
}

void Task::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Task::Clear() {
// @@protoc_insertion_point(message_clear_start:tpipeline.proto.Task)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.data_ != nullptr) {
    delete _impl_.data_;
  }
  _impl_.data_ = nullptr;
  ::memset(&_impl_.type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.micro_batch_id_) -
      reinterpret_cast<char*>(&_impl_.type_)) + sizeof(_impl_.micro_batch_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Task::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .tpipeline.proto.TaskType type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::tpipeline::proto::TaskType>(val));
        } else
          goto handle_unusual;
        continue;
      // .tpipeline.proto.Tensor data = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_data(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 micro_batch_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.micro_batch_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Task::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tpipeline.proto.Task)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .tpipeline.proto.TaskType type = 1;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_type(), target);
  }

  // .tpipeline.proto.Tensor data = 2;
  if (this->_internal_has_data()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::data(this),
        _Internal::data(this).GetCachedSize(), target, stream);
  }

  // uint32 micro_batch_id = 3;
  if (this->_internal_micro_batch_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_micro_batch_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tpipeline.proto.Task)
  return target;
}

size_t Task::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tpipeline.proto.Task)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .tpipeline.proto.Tensor data = 2;
  if (this->_internal_has_data()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.data_);
  }

  // .tpipeline.proto.TaskType type = 1;
  if (this->_internal_type() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_type());
  }

  // uint32 micro_batch_id = 3;
  if (this->_internal_micro_batch_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_micro_batch_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Task::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Task::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Task::GetClassData() const { return &_class_data_; }


void Task::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Task*>(&to_msg);
  auto& from = static_cast<const Task&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tpipeline.proto.Task)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_data()) {
    _this->_internal_mutable_data()->::tpipeline::proto::Tensor::MergeFrom(
        from._internal_data());
  }
  if (from._internal_type() != 0) {
    _this->_internal_set_type(from._internal_type());
  }
  if (from._internal_micro_batch_id() != 0) {
    _this->_internal_set_micro_batch_id(from._internal_micro_batch_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Task::CopyFrom(const Task& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tpipeline.proto.Task)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Task::IsInitialized() const {
  return true;
}

void Task::InternalSwap(Task* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Task, _impl_.micro_batch_id_)
      + sizeof(Task::_impl_.micro_batch_id_)
      - PROTOBUF_FIELD_OFFSET(Task, _impl_.data_)>(
          reinterpret_cast<char*>(&_impl_.data_),
          reinterpret_cast<char*>(&other->_impl_.data_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Task::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fpipeline_2eproto_getter, &descriptor_table_proto_2fpipeline_2eproto_once,
      file_level_metadata_proto_2fpipeline_2eproto[1]);
}

// ===================================================================

class Message::_Internal {
 public:
  static const ::tpipeline::proto::Task& task(const Message* msg);
};

const ::tpipeline::proto::Task&
Message::_Internal::task(const Message* msg) {
  return *msg->_impl_.payload_.task_;
}
void Message::set_allocated_task(::tpipeline::proto::Task* task) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_payload();
  if (task) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(task);
    if (message_arena != submessage_arena) {
      task = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, task, submessage_arena);
    }
    set_has_task();
    _impl_.payload_.task_ = task;
  }
  // @@protoc_insertion_point(field_set_allocated:tpipeline.proto.Message.task)
}
Message::Message(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tpipeline.proto.Message)
}
Message::Message(const Message& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Message* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.sender_id_){}
    , decltype(_impl_.recipient_id_){}
    , decltype(_impl_.command_type_){}
    , decltype(_impl_.sequence_number_){}
    , decltype(_impl_.timestamp_){}
    , decltype(_impl_.payload_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.sender_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.sender_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_sender_id().empty()) {
    _this->_impl_.sender_id_.Set(from._internal_sender_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.recipient_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.recipient_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_recipient_id().empty()) {
    _this->_impl_.recipient_id_.Set(from._internal_recipient_id(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.command_type_, &from._impl_.command_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.timestamp_) -
    reinterpret_cast<char*>(&_impl_.command_type_)) + sizeof(_impl_.timestamp_));
  clear_has_payload();
  switch (from.payload_case()) {
    case kTask: {
      _this->_internal_mutable_task()->::tpipeline::proto::Task::MergeFrom(
          from._internal_task());
      break;
    }
    case kText: {
      _this->_internal_set_text(from._internal_text());
      break;
    }
    case kSignal: {
      _this->_internal_set_signal(from._internal_signal());
      break;
    }
    case PAYLOAD_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:tpipeline.proto.Message)
}

inline void Message::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.sender_id_){}
    , decltype(_impl_.recipient_id_){}
    , decltype(_impl_.command_type_){0}
    , decltype(_impl_.sequence_number_){0u}
    , decltype(_impl_.timestamp_){uint64_t{0u}}
    , decltype(_impl_.payload_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  _impl_.sender_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.sender_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.recipient_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.recipient_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  clear_has_payload();
}

Message::~Message() {
  // @@protoc_insertion_point(destructor:tpipeline.proto.Message)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Message::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.sender_id_.Destroy();
  _impl_.recipient_id_.Destroy();
  if (has_payload()) {
    clear_payload();
  }
}

void Message::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Message::clear_payload() {
// @@protoc_insertion_point(one_of_clear_start:tpipeline.proto.Message)
  switch (payload_case()) {
    case kTask: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.payload_.task_;
      }
      break;
    }
    case kText: {
      _impl_.payload_.text_.Destroy();
      break;
    }
    case kSignal: {
      // No need to clear
      break;
    }
    case PAYLOAD_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = PAYLOAD_NOT_SET;
}


void Message::Clear() {
// @@protoc_insertion_point(message_clear_start:tpipeline.proto.Message)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.sender_id_.ClearToEmpty();
  _impl_.recipient_id_.ClearToEmpty();
  ::memset(&_impl_.command_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.timestamp_) -
      reinterpret_cast<char*>(&_impl_.command_type_)) + sizeof(_impl_.timestamp_));
  clear_payload();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Message::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .tpipeline.proto.CommandType command_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_command_type(static_cast<::tpipeline::proto::CommandType>(val));
        } else
          goto handle_unusual;
        continue;
      // uint32 sequence_number = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.sequence_number_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string sender_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_sender_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tpipeline.proto.Message.sender_id"));
        } else
          goto handle_unusual;
        continue;
      // string recipient_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_recipient_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tpipeline.proto.Message.recipient_id"));
        } else
          goto handle_unusual;
        continue;
      // uint64 timestamp = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .tpipeline.proto.Task task = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_task(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string text = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          auto str = _internal_mutable_text();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tpipeline.proto.Message.text"));
        } else
          goto handle_unusual;
        continue;
      // bool signal = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          _internal_set_signal(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Message::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tpipeline.proto.Message)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .tpipeline.proto.CommandType command_type = 1;
  if (this->_internal_command_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_command_type(), target);
  }

  // uint32 sequence_number = 2;
  if (this->_internal_sequence_number() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_sequence_number(), target);
  }

  // string sender_id = 3;
  if (!this->_internal_sender_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_sender_id().data(), static_cast<int>(this->_internal_sender_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tpipeline.proto.Message.sender_id");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_sender_id(), target);
  }

  // string recipient_id = 4;
  if (!this->_internal_recipient_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_recipient_id().data(), static_cast<int>(this->_internal_recipient_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tpipeline.proto.Message.recipient_id");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_recipient_id(), target);
  }

  // uint64 timestamp = 5;
  if (this->_internal_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(5, this->_internal_timestamp(), target);
  }

  // .tpipeline.proto.Task task = 10;
  if (_internal_has_task()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(10, _Internal::task(this),
        _Internal::task(this).GetCachedSize(), target, stream);
  }

  // string text = 11;
  if (_internal_has_text()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_text().data(), static_cast<int>(this->_internal_text().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tpipeline.proto.Message.text");
    target = stream->WriteStringMaybeAliased(
        11, this->_internal_text(), target);
  }

  // bool signal = 12;
  if (_internal_has_signal()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(12, this->_internal_signal(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tpipeline.proto.Message)
  return target;
}

size_t Message::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tpipeline.proto.Message)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string sender_id = 3;
  if (!this->_internal_sender_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_sender_id());
  }

  // string recipient_id = 4;
  if (!this->_internal_recipient_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_recipient_id());
  }

  // .tpipeline.proto.CommandType command_type = 1;
  if (this->_internal_command_type() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_command_type());
  }

  // uint32 sequence_number = 2;
  if (this->_internal_sequence_number() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_sequence_number());
  }

  // uint64 timestamp = 5;
  if (this->_internal_timestamp() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_timestamp());
  }

  switch (payload_case()) {
    // .tpipeline.proto.Task task = 10;
    case kTask: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.payload_.task_);
      break;
    }
    // string text = 11;
    case kText: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_text());
      break;
    }
    // bool signal = 12;
    case kSignal: {
      total_size += 1 + 1;
      break;
    }
    case PAYLOAD_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Message::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Message::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Message::GetClassData() const { return &_class_data_; }


void Message::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Message*>(&to_msg);
  auto& from = static_cast<const Message&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tpipeline.proto.Message)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_sender_id().empty()) {
    _this->_internal_set_sender_id(from._internal_sender_id());
  }
  if (!from._internal_recipient_id().empty()) {
    _this->_internal_set_recipient_id(from._internal_recipient_id());
  }
  if (from._internal_command_type() != 0) {
    _this->_internal_set_command_type(from._internal_command_type());
  }
  if (from._internal_sequence_number() != 0) {
    _this->_internal_set_sequence_number(from._internal_sequence_number());
  }
  if (from._internal_timestamp() != 0) {
    _this->_internal_set_timestamp(from._internal_timestamp());
  }
  switch (from.payload_case()) {
    case kTask: {
      _this->_internal_mutable_task()->::tpipeline::proto::Task::MergeFrom(
          from._internal_task());
      break;
    }
    case kText: {
      _this->_internal_set_text(from._internal_text());
      break;
    }
    case kSignal: {
      _this->_internal_set_signal(from._internal_signal());
      break;
    }
    case PAYLOAD_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Message::CopyFrom(const Message& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tpipeline.proto.Message)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Message::IsInitialized() const {
  return true;
}

void Message::InternalSwap(Message* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.sender_id_, lhs_arena,
      &other->_impl_.sender_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.recipient_id_, lhs_arena,
      &other->_impl_.recipient_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Message, _impl_.timestamp_)
      + sizeof(Message::_impl_.timestamp_)
      - PROTOBUF_FIELD_OFFSET(Message, _impl_.command_type_)>(
          reinterpret_cast<char*>(&_impl_.command_type_),
          reinterpret_cast<char*>(&other->_impl_.command_type_));
  swap(_impl_.payload_, other->_impl_.payload_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata Message::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fpipeline_2eproto_getter, &descriptor_table_proto_2fpipeline_2eproto_once,
      file_level_metadata_proto_2fpipeline_2eproto[2]);
}

// ===================================================================

class StageConfig::_Internal {
 public:
};

StageConfig::StageConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tpipeline.proto.StageConfig)
}
StageConfig::StageConfig(const StageConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  StageConfig* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.stage_id_){}
    , decltype(_impl_.model_config_json_){}
    , decltype(_impl_.next_stage_endpoint_){}
    , decltype(_impl_.prev_stage_endpoint_){}
    , decltype(_impl_.coordinator_endpoint_){}
    , decltype(_impl_.stage_index_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.stage_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.stage_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_stage_id().empty()) {
    _this->_impl_.stage_id_.Set(from._internal_stage_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.model_config_json_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.model_config_json_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_model_config_json().empty()) {
    _this->_impl_.model_config_json_.Set(from._internal_model_config_json(), 
      _this->GetArenaForAllocation());
  }
  _impl_.next_stage_endpoint_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.next_stage_endpoint_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_next_stage_endpoint().empty()) {
    _this->_impl_.next_stage_endpoint_.Set(from._internal_next_stage_endpoint(), 
      _this->GetArenaForAllocation());
  }
  _impl_.prev_stage_endpoint_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.prev_stage_endpoint_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_prev_stage_endpoint().empty()) {
    _this->_impl_.prev_stage_endpoint_.Set(from._internal_prev_stage_endpoint(), 
      _this->GetArenaForAllocation());
  }
  _impl_.coordinator_endpoint_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.coordinator_endpoint_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_coordinator_endpoint().empty()) {
    _this->_impl_.coordinator_endpoint_.Set(from._internal_coordinator_endpoint(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.stage_index_ = from._impl_.stage_index_;
  // @@protoc_insertion_point(copy_constructor:tpipeline.proto.StageConfig)
}

inline void StageConfig::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.stage_id_){}
    , decltype(_impl_.model_config_json_){}
    , decltype(_impl_.next_stage_endpoint_){}
    , decltype(_impl_.prev_stage_endpoint_){}
    , decltype(_impl_.coordinator_endpoint_){}
    , decltype(_impl_.stage_index_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.stage_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.stage_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.model_config_json_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.model_config_json_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.next_stage_endpoint_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.next_stage_endpoint_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.prev_stage_endpoint_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.prev_stage_endpoint_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.coordinator_endpoint_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.coordinator_endpoint_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

StageConfig::~StageConfig() {
  // @@protoc_insertion_point(destructor:tpipeline.proto.StageConfig)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void StageConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.stage_id_.Destroy();
  _impl_.model_config_json_.Destroy();
  _impl_.next_stage_endpoint_.Destroy();
  _impl_.prev_stage_endpoint_.Destroy();
  _impl_.coordinator_endpoint_.Destroy();
}

void StageConfig::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void StageConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:tpipeline.proto.StageConfig)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.stage_id_.ClearToEmpty();
  _impl_.model_config_json_.ClearToEmpty();
  _impl_.next_stage_endpoint_.ClearToEmpty();
  _impl_.prev_stage_endpoint_.ClearToEmpty();
  _impl_.coordinator_endpoint_.ClearToEmpty();
  _impl_.stage_index_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StageConfig::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string stage_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_stage_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tpipeline.proto.StageConfig.stage_id"));
        } else
          goto handle_unusual;
        continue;
      // int32 stage_index = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.stage_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string model_config_json = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_model_config_json();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tpipeline.proto.StageConfig.model_config_json"));
        } else
          goto handle_unusual;
        continue;
      // string next_stage_endpoint = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_next_stage_endpoint();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tpipeline.proto.StageConfig.next_stage_endpoint"));
        } else
          goto handle_unusual;
        continue;
      // string prev_stage_endpoint = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_prev_stage_endpoint();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tpipeline.proto.StageConfig.prev_stage_endpoint"));
        } else
          goto handle_unusual;
        continue;
      // string coordinator_endpoint = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_coordinator_endpoint();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tpipeline.proto.StageConfig.coordinator_endpoint"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* StageConfig::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tpipeline.proto.StageConfig)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string stage_id = 1;
  if (!this->_internal_stage_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_stage_id().data(), static_cast<int>(this->_internal_stage_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tpipeline.proto.StageConfig.stage_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_stage_id(), target);
  }

  // int32 stage_index = 2;
  if (this->_internal_stage_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_stage_index(), target);
  }

  // string model_config_json = 3;
  if (!this->_internal_model_config_json().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_model_config_json().data(), static_cast<int>(this->_internal_model_config_json().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tpipeline.proto.StageConfig.model_config_json");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_model_config_json(), target);
  }

  // string next_stage_endpoint = 4;
  if (!this->_internal_next_stage_endpoint().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_next_stage_endpoint().data(), static_cast<int>(this->_internal_next_stage_endpoint().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tpipeline.proto.StageConfig.next_stage_endpoint");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_next_stage_endpoint(), target);
  }

  // string prev_stage_endpoint = 5;
  if (!this->_internal_prev_stage_endpoint().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_prev_stage_endpoint().data(), static_cast<int>(this->_internal_prev_stage_endpoint().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tpipeline.proto.StageConfig.prev_stage_endpoint");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_prev_stage_endpoint(), target);
  }

  // string coordinator_endpoint = 6;
  if (!this->_internal_coordinator_endpoint().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_coordinator_endpoint().data(), static_cast<int>(this->_internal_coordinator_endpoint().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tpipeline.proto.StageConfig.coordinator_endpoint");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_coordinator_endpoint(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tpipeline.proto.StageConfig)
  return target;
}

size_t StageConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tpipeline.proto.StageConfig)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string stage_id = 1;
  if (!this->_internal_stage_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_stage_id());
  }

  // string model_config_json = 3;
  if (!this->_internal_model_config_json().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_model_config_json());
  }

  // string next_stage_endpoint = 4;
  if (!this->_internal_next_stage_endpoint().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_next_stage_endpoint());
  }

  // string prev_stage_endpoint = 5;
  if (!this->_internal_prev_stage_endpoint().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_prev_stage_endpoint());
  }

  // string coordinator_endpoint = 6;
  if (!this->_internal_coordinator_endpoint().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_coordinator_endpoint());
  }

  // int32 stage_index = 2;
  if (this->_internal_stage_index() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_stage_index());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData StageConfig::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    StageConfig::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*StageConfig::GetClassData() const { return &_class_data_; }


void StageConfig::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<StageConfig*>(&to_msg);
  auto& from = static_cast<const StageConfig&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tpipeline.proto.StageConfig)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_stage_id().empty()) {
    _this->_internal_set_stage_id(from._internal_stage_id());
  }
  if (!from._internal_model_config_json().empty()) {
    _this->_internal_set_model_config_json(from._internal_model_config_json());
  }
  if (!from._internal_next_stage_endpoint().empty()) {
    _this->_internal_set_next_stage_endpoint(from._internal_next_stage_endpoint());
  }
  if (!from._internal_prev_stage_endpoint().empty()) {
    _this->_internal_set_prev_stage_endpoint(from._internal_prev_stage_endpoint());
  }
  if (!from._internal_coordinator_endpoint().empty()) {
    _this->_internal_set_coordinator_endpoint(from._internal_coordinator_endpoint());
  }
  if (from._internal_stage_index() != 0) {
    _this->_internal_set_stage_index(from._internal_stage_index());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void StageConfig::CopyFrom(const StageConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tpipeline.proto.StageConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StageConfig::IsInitialized() const {
  return true;
}

void StageConfig::InternalSwap(StageConfig* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.stage_id_, lhs_arena,
      &other->_impl_.stage_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.model_config_json_, lhs_arena,
      &other->_impl_.model_config_json_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.next_stage_endpoint_, lhs_arena,
      &other->_impl_.next_stage_endpoint_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.prev_stage_endpoint_, lhs_arena,
      &other->_impl_.prev_stage_endpoint_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.coordinator_endpoint_, lhs_arena,
      &other->_impl_.coordinator_endpoint_, rhs_arena
  );
  swap(_impl_.stage_index_, other->_impl_.stage_index_);
}

::PROTOBUF_NAMESPACE_ID::Metadata StageConfig::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fpipeline_2eproto_getter, &descriptor_table_proto_2fpipeline_2eproto_once,
      file_level_metadata_proto_2fpipeline_2eproto[3]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace proto
}  // namespace tpipeline
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::tpipeline::proto::Tensor*
Arena::CreateMaybeMessage< ::tpipeline::proto::Tensor >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tpipeline::proto::Tensor >(arena);
}
template<> PROTOBUF_NOINLINE ::tpipeline::proto::Task*
Arena::CreateMaybeMessage< ::tpipeline::proto::Task >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tpipeline::proto::Task >(arena);
}
template<> PROTOBUF_NOINLINE ::tpipeline::proto::Message*
Arena::CreateMaybeMessage< ::tpipeline::proto::Message >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tpipeline::proto::Message >(arena);
}
template<> PROTOBUF_NOINLINE ::tpipeline::proto::StageConfig*
Arena::CreateMaybeMessage< ::tpipeline::proto::StageConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tpipeline::proto::StageConfig >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
